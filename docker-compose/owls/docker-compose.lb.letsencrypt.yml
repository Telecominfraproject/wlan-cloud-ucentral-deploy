volumes:
  kafka_data:
    driver: local

networks:
  owls:

services:
  owsec:
    image: "tip-tip-wlan-cloud-ucentral.jfrog.io/owsec:${OWSEC_TAG}"
    networks:
      owls:
        aliases:
          - ${INTERNAL_OWSEC_HOSTNAME}
    env_file:
      - owsec.env
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - "./owsec_data:${OWSEC_ROOT}"
      - "../certs:/${OWSEC_ROOT}/certs"

  owfms:
    image: "tip-tip-wlan-cloud-ucentral.jfrog.io/owfms:${OWFMS_TAG}"
    networks:
      owls:
        aliases:
          - ${INTERNAL_OWFMS_HOSTNAME}
    env_file:
      - owfms.env
    depends_on:
      init-kafka:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - "./owfms_data:${OWFMS_ROOT}"
      - "../certs:/${OWFMS_ROOT}/certs"

  owls:
    image: "tip-tip-wlan-cloud-ucentral.jfrog.io/owls:${OWLS_TAG}"
    networks:
      owls:
        aliases:
          - ${INTERNAL_OWLS_HOSTNAME}
    env_file:
      - owls.env
    depends_on:
      owsec:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
    restart: unless-stopped
    volumes:
      - "./owls_data:${OWLS_ROOT}"
      - "../certs:/${OWLS_ROOT}/certs"

  owls-ui:
    image: "tip-tip-wlan-cloud-ucentral.jfrog.io/owls-ui:${OWLSUI_TAG}"
    networks:
      owls:
        aliases:
          - ${INTERNAL_OWLSUI_HOSTNAME}
    env_file:
      - owls-ui.env
    depends_on:
      - owsec
      - owfms
      - owls
    restart: unless-stopped
    volumes:
      - "./owls-ui/default.conf:/etc/nginx/conf.d/default.conf"
      - "../certs/restapi-cert.pem:/etc/nginx/restapi-cert.pem"
      - "../certs/restapi-key.pem:/etc/nginx/restapi-key.pem"

  traefik:
    image: "traefik:${TRAEFIK_TAG}"
    networks:
      owls:
    env_file:
      - traefik.env
    depends_on:
      - owsec
      - owfms
      - owls
      - owls-ui
    restart: unless-stopped
    volumes:
      - "./traefik/openwifi_letsencrypt.yaml:/etc/traefik/openwifi.yaml"
      - "../certs/restapi-ca.pem:/certs/restapi-ca.pem"
      - "./letsencrypt_certs:/letsencrypt"
    entrypoint:
      - /bin/sh
      - -c
      - |
        timeout 10m sh -c 'until [[ "$$(getent hosts $SDKHOSTNAME)" ]]; do echo "Waiting until DNS record for $SDKHOSTNAME is resolvable"; sleep 5; done' \
        && ./entrypoint.sh traefik
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "16001:16001"
      - "16004:16004"
      - "16007:16007"

  kafka:
    image: "docker.io/bitnami/kafka:${KAFKA_TAG}"
    networks:
      owls:
    env_file:
      - kafka.env
    restart: unless-stopped
    volumes:
      - kafka_data:/bitnami/kafka

  init-kafka:
    image: "docker.io/bitnami/kafka:${KAFKA_TAG}"
    networks:
      owls:
    depends_on:
      - kafka
    env_file:
      - kafka.env
    entrypoint:
      - /bin/sh
      - -c
      - |
        echo "Sleeping to allow kafka to start up..."
        sleep 10
        echo "Creating all required Kafka topics..."
        for topic in $$TOPICS; do
          /opt/bitnami/kafka/bin/kafka-topics.sh \
          --create --if-not-exists --topic $$topic --replication-factor 1 \
          --partitions 1 --bootstrap-server kafka:9092
        done && echo "Successfully created Kafka topics, exiting." && exit 0
